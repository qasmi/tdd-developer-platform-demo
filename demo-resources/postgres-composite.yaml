apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xpostgresqlinstances.platform.example.org
spec:
  group: platform.example.org
  names:
    kind: XPostgreSQLInstance
    plural: xpostgresqlinstances
  claimNames:
    kind: PostgreSQLInstance
    plural: postgresqlinstances
  versions:
    - name: v1alpha1
      served: true
      referenceable: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                parameters:
                  type: object
                  description: "Parameters for the PostgreSQL Instance."
                  properties:
                    storageGB:
                      type: integer
                      description: "Size of the persistent volume claim in GB."
                    database:
                      type: string
                      description: "The name of the database to create."
                  required:
                    - storageGB
                    - database
              required:
                - parameters
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: in-cluster-cnpg-postgresql
  labels:
    provider: cnpg
spec:
  compositeTypeRef:
    apiVersion: platform.example.org/v1alpha1
    kind: XPostgreSQLInstance
  # Instruct Crossplane to copy connection details to a Secret in the claim namespace.
  writeConnectionSecretsToNamespace: '{{ .metadata.labels.crossplane\.io/claim-namespace }}'
  
  resources:
    # 1. Create the CloudNativePG Cluster Managed Resource
    - name: postgres-cluster
      base:
        apiVersion: postgresql.cnpg.io/v1
        kind: Cluster
        metadata:
          # CNPG requires the Cluster to be created in a specific namespace. 
          # We use the claim's namespace.
          namespace: '{{ .metadata.labels.crossplane\.io/claim-namespace }}'
          labels:
            app: cnpg-cluster
        spec:
          instances: 1
          imageName: ghcr.io/cloudnative-pg/postgresql:16.2
          storage:
            size: 
              # Patched below
            storageClass: standard # Update this with your cluster's StorageClass
          
          # We tell CNPG to create a single database with a user.
          # The database name will be patched from the XRC.
          bootstrap:
            initdb:
              database: 
                # Patched below

          # CNPG will automatically create a secret containing the connection info.
          # We need to expose this secret's name to Crossplane so it can patch its contents.
          enableSuperuserAccess: true

      patches:
        # Patch the Storage Size from the XRD parameters
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.storageGB
          toFieldPath: spec.storage.size
          transforms:
            - type: String
              string:
                fmt: "%dGi" # Append 'Gi' to the integer value

        # Patch the Database Name from the XRD parameters
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.database
          toFieldPath: spec.bootstrap.initdb.database

        # Patch the generated secret name to the XRC status for observation
        - type: ToCompositeFieldPath
          fromFieldPath: status.secretNames
          toFieldPath: status.connectionSecretName

      connectionDetails:
        # 2. Patch Connection Details from the CNPG generated Secret
        # CNPG creates a secret named <cluster-name>-superuser, which is the same as the cluster name.
        - fromFieldPath: metadata.name
          toConnectionSecretKey: cluster-name
          # This patch is used to dynamically construct the secret name used for other patches
          # The result of this patch is NOT published to the final connection secret

        # Copy the host/service from the CNPG Cluster service
        - type: FromValue
          toConnectionSecretKey: host
          value: '{{ .metadata.name }}-rw.{{ .metadata.labels.crossplane\.io/claim-namespace }}.svc.cluster.local' # CNPG convention

        # CNPG default port
        - type: FromValue
          toConnectionSecretKey: port
          value: "5432"

        # The actual Secret we need to read from is the CNPG superuser secret
        # The Secret name is the Cluster name
        - type: FromFieldPath
          fromFieldPath: status.connectionSecretName # Value comes from the previous patch 'status.secretNames'
          toConnectionSecretKey: username
          # This tells Crossplane to read from the CNPG secret
          # The secret is <cluster-name>-superuser
          # CNPG automatically creates a secret named <cluster-name>-superuser for the superuser credentials
          # For a cluster named 'my-cluster', the secret is 'my-cluster-superuser'
          # We can use the cluster name as a reference to the secret.
          # The CNPG secret contains keys: username, password, host, port, dbname, etc.
          # We will use patches to read these values from the secret

        # Patch the database name to the connection secret
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.database
          toConnectionSecretKey: database

        # Copy the password from the CNPG generated Secret
        # The key name in the CNPG secret is 'password'
        - fromSecretRef:
            key: password
            name: '{{ .metadata.name }}-superuser' # CNPG secret naming convention: <cluster-name>-superuser
            namespace: '{{ .metadata.labels.crossplane\.io/claim-namespace }}'
          toConnectionSecretKey: password

        # Copy the username from the CNPG generated Secret
        # The key name in the CNPG secret is 'username'
        - fromSecretRef:
            key: username
            name: '{{ .metadata.name }}-superuser'
            namespace: '{{ .metadata.labels.crossplane\.io/claim-namespace }}'
          toConnectionSecretKey: username